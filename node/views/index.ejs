<!DOCTYPE html>
<link rel="stylesheet" type="text/css" href="index.css">
<script>
  var canvas = 1;
  var debug = 1;
</script>

<html>
  <head>
    <title>Coucou</title>
  </head>
  <body>
    <div id=menu>
      <div id=lat>Cette page est une
      page toute simple </div>
      <div id=camerasize>
        <FORM>
          <SELECT id="reschoice" size="1">
            <OPTION>800x600
            <OPTION>640x480
            <OPTION>512x384
            <OPTION>400x300
            <OPTION>384x288
            <OPTION>320x240
            <OPTION>256x192
            <OPTION>160x120
            <OPTION>40x30
          </SELECT>
        </FORM>


      </div>
    </div>
  <div id=cameradiv>

    <script>
      if(canvas)
      {
        document.write('<canvas id="camvas" width="800" height="600" style="border:1px solid #000000;"></canvas>');
      }
      else
      {
        document.write('<img id=cam src="webcam.jpg" height="600"/>');
      }
    </script>
  </div>
  </center>
  </body>
</html>





<script>
//-------------------------gamepad
// https://developer.mozilla.org/fr/docs/Web/Guide/API/Gamepad
var gamepadlistener = null;
var onlinepads = [];
var padfreq = 20;
var padstate = [];
var detection_step = 0.03;

function pollGamepad() {

  for (var gpindex in onlinepads) {
      var gp = navigator.getGamepads()[gpindex]; //each gamepad

      for(var i=0;i<gp.buttons.length;i++) //buttons
      {
        var previous = padstate[gp.index]["button"+i]; //save previous value 
        var current = gp.buttons[i].value;// read current value 
        if(Math.abs(previous - current) > detection_step || ((current == 0 || current == 1) && current != previous))
        {
            if(current > 0) //pressed
            {
              if(debug == 1) console.log("Button " + i + " pressed with value : " + current);
            }
            else { //released
            }
            sendPadValue("button", i, current); //send to server
            padstate[gp.index]["button"+i] = current; //save current button state
        }

      /*for(var i=0;i<gp.axes.length; i+=2) {
          if(debug == 1) console.log("Stick "+(Math.ceil(i/2)+1)+": "+gp.axes[i]+","+gp.axes[i+1]);
      }*/
    }
    for(var i=0;i<gp.axes.length;i++) //axes
    {
      var previous = padstate[gp.index]["axe"+i];
      var current = gp.axes[i];
      if(Math.abs(previous - current) > detection_step || ((current == 0 || current == 1) && current != previous))
      {
        if(debug == 1) console.log("Axe " + i + " moved - value: " + current);
        sendPadValue("axe", i, current);
        padstate[gp.index]["axe"+i] = current;
      }

    }
  }
}

function sendPadValue(type, id, value)
{
  req = new XMLHttpRequest();
  req.open("POST", "http://" + window.location.hostname + ":" + window.location.port + "/gamepad", true);
  req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  var encoded = 'type='+ type + '&id=' + id + '&value=' + value;

  req.onload = function(e)
  {
    if (req.readyState === 4)
      if (req.status !== 200){
        if(debug == 1) alert("[gamepad]There was a communications error: " + req.responseText);
        return;
      }
  }

  req.send(encoded);
}

function addpad(pad)
{
  if(debug == 1) console.log("Contrôleur n°%d connecté : %s. %d boutons, %d axes.",
  pad.index, pad.id,
  pad.buttons.length, pad.axes.length);

  map = {};

  //add all buttons
  for(var i=0;i<pad.buttons.length;i++) {
    map["button" + i] = pad.buttons[i].value;
  }

  //add all axes
  for(var i=0;i<pad.axes.length; i+=2) {
    map["axe" + i] = pad.axes[i];
    map["axe" + (i+1)] = pad.axes[i+1];
  }

  padstate[pad.index] = map; //register button map

  //if(debug == 1) console.log(JSON.stringify(padstate));

  onlinepads.push(pad.index); //TODO check gamepad
  if(gamepadlistener == null)
    gamepadlistener = window.setInterval(pollGamepad, padfreq);
}

//register already connected gamepads
for (var i = 0; i < navigator.getGamepads().length; i++) {
  var pad = navigator.getGamepads()[i];
  if(typeof(pad) != 'undefined' && pad != null)
  {
    addpad(pad);
  }
}

window.addEventListener("gamepadconnected", function(e) {
  if(e.gamepad != null)
  	addpad(e.gamepad);
});

window.addEventListener("gamepaddisconnected", function(e) {
  if(debug == 1) console.log("Contrôleur n°%d déconnecté : %s",
  e.gamepad.index, e.gamepad.id);

  onlinepads.splice(onlinepads.indexOf(e.gamepad.index));//remove gamepad from list

  if(onlinepads.length == 0)
  {
    window.clearInterval(gamepadlistener);
    gamepadlistener = null;
  }
});





//-------------------------changement de résolution

var reschoice = document.getElementById('reschoice');
reschoice.onchange = function(){
  rt = reschoice.options[reschoice.selectedIndex].text.split('x');
  req = new XMLHttpRequest();
  req.open("POST", "http://" + window.location.hostname + ":" + window.location.port + "/setres", true);
  req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
  var encoded = 'w='+ rt[0] + '&h=' + rt[1];

  req.onload = function(e)
  {
    if (req.readyState === 4)
      if (req.status !== 200){
        if(debug == 1) alert("There was a communications error: " + req.responseText);
        return;
      }
  }

  req.send(encoded);
}

//-------------------------affichage de l'image
function sleep (time) {
  return new Promise((resolve) => setTimeout(resolve, time));
}


function start_webcam_diffusion()
{
  if(canvas)
  {
    //refresh image
    function getimage(){
        updateFPS();
        ctx.drawImage(img,0,0, camvas.width, camvas.height);
        img.src = "webcam.jpg?" + new Date().getTime();
      };

    /* using canvas */

    var camvas = document.getElementById("camvas");
    var ctx = camvas.getContext('2d');
    var img = new Image;
    img.onload = getimage;
    img.src = "webcam.jpg?" + new Date().getTime();
  }
  else {
    /* using image */
    var camimg = document.getElementById("cam");
    camimg.onload = function () {
      updateFPS();
      camimg.src = "webcam.jpg?" + new Date().getTime();
    }
  }

}



var loadtime = new Date().getTime();
var lat = document.getElementById("lat");
var printfps = 0;
var fps = 0;
var fpstime = new Date().getTime();

function updateFPS()
{
  var now = new Date().getTime();
  fps ++;
  if((now - fpstime) >= 1000)
  {
    printfps = fps;
    fps = 0;
    fpstime = now;
  }

  lat.innerHTML = 'Latency : ' + (now - loadtime) + '</br>' +
    'FPS : ' + printfps;

  loadtime = now;
}



//start diffusion
start_webcam_diffusion();
</script>
